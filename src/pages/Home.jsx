import { useMountedRef } from '@/share/common';
import { useFlowContext, useTokenContext } from '@/share/context';
import { Button } from '@progress/kendo-react-buttons';
import { Card, CardBody, CardHeader, CardTitle } from '@progress/kendo-react-layout';
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

function Home() {
    const { userToken } = useTokenContext();
    const navigate = useNavigate();

    const { flowData } = useFlowContext();
    const { refreshFlowData } = useFlowContext();

    const mount = useMountedRef();

    const todos = [
        { id: 1, task: 'ÂÆåÊàêÂ∞àÊ°àÂ†±Âëä', completed: false },
        { id: 2, task: 'ÂõûË¶ÜÂÆ¢Êà∂ÈÉµ‰ª∂', completed: true },
        { id: 3, task: 'Ê∫ñÂÇôÊúÉË≠∞Ë≥áÊñô', completed: false },
    ];

    const announcements = [
        { id: 1, title: 'Á≥ªÁµ±Á∂≠Ë≠∑ÈÄöÁü•', date: '2024-01-15', content: 'Á≥ªÁµ±Â∞áÊñºÊú¨ÈÄ±Êú´ÈÄ≤Ë°åÁ∂≠Ë≠∑' },
        { id: 2, title: 'Êñ∞ÂäüËÉΩ‰∏äÁ∑ö', date: '2024-01-10', content: 'Êñ∞Â¢ûÂ†±Ë°®ÂäüËÉΩÂ∑≤Ê≠£Âºè‰∏äÁ∑ö' },
    ];

    const systemStatus = [
        { service: 'Ë≥áÊñôÂ∫´', status: 'Ê≠£Â∏∏', color: 'bg-green-500' },
        { service: 'APIÊúçÂãô', status: 'Ê≠£Â∏∏', color: 'bg-green-500' },
        { service: 'Ê™îÊ°àÁ≥ªÁµ±', status: 'Ë≠¶Âëä', color: 'bg-yellow-500' },
    ];

    const approvalList = [
        { id: 1, title: 'Ë´ãÂÅáÁî≥Ë´ã', applicant: 'ÂºµÂ∞èÊòé', date: '2024-01-15', status: 'ÂæÖÁ∞ΩÊ†∏' },
        { id: 2, title: 'Êé°Ë≥ºÁî≥Ë´ã', applicant: 'ÊùéÂ∞èËèØ', date: '2024-01-14', status: 'ÂæÖÁ∞ΩÊ†∏' },
        { id: 3, title: 'Âä†Áè≠Áî≥Ë´ã', applicant: 'ÁéãÂ∞èÁæé', date: '2024-01-13', status: 'ÂæÖÁ∞ΩÊ†∏' },
    ];

    const refresh = async () => {
        if (mount) {
            await refreshFlowData();
        }
    };
    useEffect(() => {
        refresh();
    }, [userToken?.UseID]);

    return (
        <div className='k-card-list p-6 space-y-6'>
            {/* Á∞ΩÊ†∏Áµ±Ë®à */}
            <Card>
                <CardHeader>
                    <CardTitle>üìä Á∞ΩÊ†∏Áµ±Ë®à</CardTitle>
                    <Button onClick={refresh} className='ml-auto'>
                        ÈáçÊñ∞Êï¥ÁêÜ
                    </Button>
                </CardHeader>
                <CardBody>
                    <div className='grid grid-cols-2 gap-6'>
                        <div
                            className='text-center p-4 bg-blue-50 rounded-lg cursor-pointer hover:bg-blue-100 transition-colors'
                            onClick={() => navigate('/flow/flow01')}
                        >
                            <div className='text-2xl font-bold text-blue-600'>{flowData.signlist?.length || 0}</div>
                            <div className='text-sm text-gray-600'>ÂæÖÁ∞ΩÊ†∏Ê∏ÖÂñÆ</div>
                        </div>
                        <div
                            className='text-center p-4 bg-red-50 rounded-lg cursor-pointer hover:bg-red-100 transition-colors'
                            onClick={() => navigate('/flow/flow04')}
                        >
                            <div className='text-2xl font-bold text-red-600'>{flowData.returnlist?.length || 0}</div>
                            <div className='text-sm text-gray-600'>Ë¢´ÈÄÄÂõûÊ∏ÖÂñÆ</div>
                        </div>
                    </div>
                </CardBody>
            </Card>
            <div className='grid grid-cols-1 lg:grid-cols-3 gap-6'>
                {/* ‰ª£Ëæ¶‰∫ãÈ†Ö */}
                <Card>
                    <CardHeader>
                        <CardTitle>üìã ‰ª£Ëæ¶‰∫ãÈ†Ö</CardTitle>
                    </CardHeader>
                    <CardBody>
                        <div className='space-y-3'>
                            {todos.map((todo) => (
                                <div key={todo.id} className='flex items-center gap-3'>
                                    <input type='checkbox' checked={todo.completed} className='w-4 h-4' />
                                    <span className={todo.completed ? 'line-through text-gray-500' : ''}>
                                        {todo.task}
                                    </span>
                                </div>
                            ))}
                        </div>
                    </CardBody>
                </Card>

                {/* ÂÖ¨‰ΩàÊ¨Ñ */}
                <Card>
                    <CardHeader>
                        <CardTitle>üì¢ ÂÖ¨‰ΩàÊ¨Ñ</CardTitle>
                    </CardHeader>
                    <CardBody>
                        <div className='space-y-4'>
                            {announcements.map((item) => (
                                <div key={item.id} className='border-b pb-3'>
                                    <h3 className='font-semibold'>{item.title}</h3>
                                    <p className='text-sm text-gray-600'>{item.date}</p>
                                    <p className='text-sm'>{item.content}</p>
                                </div>
                            ))}
                        </div>
                    </CardBody>
                </Card>

                {/* Á≥ªÁµ±ÁãÄÊÖã */}
                <Card className='mt-4'>
                    <CardHeader>
                        <CardTitle>‚ö° Á≥ªÁµ±ÁãÄÊÖã</CardTitle>
                    </CardHeader>
                    <CardBody>
                        <div className='space-y-3'>
                            {systemStatus.map((item, index) => (
                                <div key={index} className='flex justify-between items-center py-4'>
                                    <span>{item.service}</span>
                                    <span className={`px-2 py-1 rounded text-white text-sm ${item.color}`}>
                                        {item.status}
                                    </span>
                                </div>
                            ))}
                        </div>
                    </CardBody>
                </Card>
            </div>
        </div>
    );
}

export default Home;
